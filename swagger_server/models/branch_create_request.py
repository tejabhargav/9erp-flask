# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BranchCreateRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, branch_name: str=None, branch_code: str=None, address: str=None, contact: str=None, courses_offered: List[str]=None):  # noqa: E501
        """BranchCreateRequest - a model defined in Swagger

        :param branch_name: The branch_name of this BranchCreateRequest.  # noqa: E501
        :type branch_name: str
        :param branch_code: The branch_code of this BranchCreateRequest.  # noqa: E501
        :type branch_code: str
        :param address: The address of this BranchCreateRequest.  # noqa: E501
        :type address: str
        :param contact: The contact of this BranchCreateRequest.  # noqa: E501
        :type contact: str
        :param courses_offered: The courses_offered of this BranchCreateRequest.  # noqa: E501
        :type courses_offered: List[str]
        """
        self.swagger_types = {
            'branch_name': str,
            'branch_code': str,
            'address': str,
            'contact': str,
            'courses_offered': List[str]
        }

        self.attribute_map = {
            'branch_name': 'branchName',
            'branch_code': 'branchCode',
            'address': 'address',
            'contact': 'contact',
            'courses_offered': 'coursesOffered'
        }
        self._branch_name = branch_name
        self._branch_code = branch_code
        self._address = address
        self._contact = contact
        self._courses_offered = courses_offered

    @classmethod
    def from_dict(cls, dikt) -> 'BranchCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BranchCreateRequest of this BranchCreateRequest.  # noqa: E501
        :rtype: BranchCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_name(self) -> str:
        """Gets the branch_name of this BranchCreateRequest.


        :return: The branch_name of this BranchCreateRequest.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name: str):
        """Sets the branch_name of this BranchCreateRequest.


        :param branch_name: The branch_name of this BranchCreateRequest.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def branch_code(self) -> str:
        """Gets the branch_code of this BranchCreateRequest.


        :return: The branch_code of this BranchCreateRequest.
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code: str):
        """Sets the branch_code of this BranchCreateRequest.


        :param branch_code: The branch_code of this BranchCreateRequest.
        :type branch_code: str
        """

        self._branch_code = branch_code

    @property
    def address(self) -> str:
        """Gets the address of this BranchCreateRequest.


        :return: The address of this BranchCreateRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this BranchCreateRequest.


        :param address: The address of this BranchCreateRequest.
        :type address: str
        """

        self._address = address

    @property
    def contact(self) -> str:
        """Gets the contact of this BranchCreateRequest.


        :return: The contact of this BranchCreateRequest.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this BranchCreateRequest.


        :param contact: The contact of this BranchCreateRequest.
        :type contact: str
        """

        self._contact = contact

    @property
    def courses_offered(self) -> List[str]:
        """Gets the courses_offered of this BranchCreateRequest.


        :return: The courses_offered of this BranchCreateRequest.
        :rtype: List[str]
        """
        return self._courses_offered

    @courses_offered.setter
    def courses_offered(self, courses_offered: List[str]):
        """Sets the courses_offered of this BranchCreateRequest.


        :param courses_offered: The courses_offered of this BranchCreateRequest.
        :type courses_offered: List[str]
        """

        self._courses_offered = courses_offered
