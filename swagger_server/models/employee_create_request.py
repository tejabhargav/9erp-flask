# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EmployeeCreateRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, role: str=None, branch: str=None, username: str=None, password: str=None):  # noqa: E501
        """EmployeeCreateRequest - a model defined in Swagger

        :param name: The name of this EmployeeCreateRequest.  # noqa: E501
        :type name: str
        :param role: The role of this EmployeeCreateRequest.  # noqa: E501
        :type role: str
        :param branch: The branch of this EmployeeCreateRequest.  # noqa: E501
        :type branch: str
        :param username: The username of this EmployeeCreateRequest.  # noqa: E501
        :type username: str
        :param password: The password of this EmployeeCreateRequest.  # noqa: E501
        :type password: str
        """
        self.swagger_types = {
            'name': str,
            'role': str,
            'branch': str,
            'username': str,
            'password': str
        }

        self.attribute_map = {
            'name': 'name',
            'role': 'role',
            'branch': 'branch',
            'username': 'username',
            'password': 'password'
        }
        self._name = name
        self._role = role
        self._branch = branch
        self._username = username
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'EmployeeCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EmployeeCreateRequest of this EmployeeCreateRequest.  # noqa: E501
        :rtype: EmployeeCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this EmployeeCreateRequest.


        :return: The name of this EmployeeCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EmployeeCreateRequest.


        :param name: The name of this EmployeeCreateRequest.
        :type name: str
        """

        self._name = name

    @property
    def role(self) -> str:
        """Gets the role of this EmployeeCreateRequest.


        :return: The role of this EmployeeCreateRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this EmployeeCreateRequest.


        :param role: The role of this EmployeeCreateRequest.
        :type role: str
        """

        self._role = role

    @property
    def branch(self) -> str:
        """Gets the branch of this EmployeeCreateRequest.


        :return: The branch of this EmployeeCreateRequest.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch: str):
        """Sets the branch of this EmployeeCreateRequest.


        :param branch: The branch of this EmployeeCreateRequest.
        :type branch: str
        """

        self._branch = branch

    @property
    def username(self) -> str:
        """Gets the username of this EmployeeCreateRequest.


        :return: The username of this EmployeeCreateRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this EmployeeCreateRequest.


        :param username: The username of this EmployeeCreateRequest.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this EmployeeCreateRequest.


        :return: The password of this EmployeeCreateRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this EmployeeCreateRequest.


        :param password: The password of this EmployeeCreateRequest.
        :type password: str
        """

        self._password = password
