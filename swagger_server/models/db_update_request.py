# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DbUpdateRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, collection_name: str=None, query: object=None, update: object=None, type: str=None):  # noqa: E501
        """DbUpdateRequest - a model defined in Swagger

        :param collection_name: The collection_name of this DbUpdateRequest.  # noqa: E501
        :type collection_name: str
        :param query: The query of this DbUpdateRequest.  # noqa: E501
        :type query: object
        :param update: The update of this DbUpdateRequest.  # noqa: E501
        :type update: object
        :param type: The type of this DbUpdateRequest.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'collection_name': str,
            'query': object,
            'update': object,
            'type': str
        }

        self.attribute_map = {
            'collection_name': 'collectionName',
            'query': 'query',
            'update': 'update',
            'type': 'type'
        }
        self._collection_name = collection_name
        self._query = query
        self._update = update
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'DbUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DbUpdateRequest of this DbUpdateRequest.  # noqa: E501
        :rtype: DbUpdateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_name(self) -> str:
        """Gets the collection_name of this DbUpdateRequest.


        :return: The collection_name of this DbUpdateRequest.
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name: str):
        """Sets the collection_name of this DbUpdateRequest.


        :param collection_name: The collection_name of this DbUpdateRequest.
        :type collection_name: str
        """

        self._collection_name = collection_name

    @property
    def query(self) -> object:
        """Gets the query of this DbUpdateRequest.


        :return: The query of this DbUpdateRequest.
        :rtype: object
        """
        return self._query

    @query.setter
    def query(self, query: object):
        """Sets the query of this DbUpdateRequest.


        :param query: The query of this DbUpdateRequest.
        :type query: object
        """

        self._query = query

    @property
    def update(self) -> object:
        """Gets the update of this DbUpdateRequest.


        :return: The update of this DbUpdateRequest.
        :rtype: object
        """
        return self._update

    @update.setter
    def update(self, update: object):
        """Sets the update of this DbUpdateRequest.


        :param update: The update of this DbUpdateRequest.
        :type update: object
        """

        self._update = update

    @property
    def type(self) -> str:
        """Gets the type of this DbUpdateRequest.


        :return: The type of this DbUpdateRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this DbUpdateRequest.


        :param type: The type of this DbUpdateRequest.
        :type type: str
        """
        allowed_values = ["updateOne", "updateMany"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
