# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Student(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, student_id: str=None, application_number: str=None, date_of_joining: date=None, branch: str=None, name: str=None, parent_name: str=None, primary_number: str=None, secondary_number: str=None, gender: str=None, batch: str=None, year_of_joining: str=None, section: str=None, roll_number: str=None, fee_structure_for_one_year: float=None):  # noqa: E501
        """Student - a model defined in Swagger

        :param student_id: The student_id of this Student.  # noqa: E501
        :type student_id: str
        :param application_number: The application_number of this Student.  # noqa: E501
        :type application_number: str
        :param date_of_joining: The date_of_joining of this Student.  # noqa: E501
        :type date_of_joining: date
        :param branch: The branch of this Student.  # noqa: E501
        :type branch: str
        :param name: The name of this Student.  # noqa: E501
        :type name: str
        :param parent_name: The parent_name of this Student.  # noqa: E501
        :type parent_name: str
        :param primary_number: The primary_number of this Student.  # noqa: E501
        :type primary_number: str
        :param secondary_number: The secondary_number of this Student.  # noqa: E501
        :type secondary_number: str
        :param gender: The gender of this Student.  # noqa: E501
        :type gender: str
        :param batch: The batch of this Student.  # noqa: E501
        :type batch: str
        :param year_of_joining: The year_of_joining of this Student.  # noqa: E501
        :type year_of_joining: str
        :param section: The section of this Student.  # noqa: E501
        :type section: str
        :param roll_number: The roll_number of this Student.  # noqa: E501
        :type roll_number: str
        :param fee_structure_for_one_year: The fee_structure_for_one_year of this Student.  # noqa: E501
        :type fee_structure_for_one_year: float
        """
        self.swagger_types = {
            'student_id': str,
            'application_number': str,
            'date_of_joining': date,
            'branch': str,
            'name': str,
            'parent_name': str,
            'primary_number': str,
            'secondary_number': str,
            'gender': str,
            'batch': str,
            'year_of_joining': str,
            'section': str,
            'roll_number': str,
            'fee_structure_for_one_year': float
        }

        self.attribute_map = {
            'student_id': 'studentId',
            'application_number': 'applicationNumber',
            'date_of_joining': 'dateOfJoining',
            'branch': 'branch',
            'name': 'name',
            'parent_name': 'parentName',
            'primary_number': 'primaryNumber',
            'secondary_number': 'secondaryNumber',
            'gender': 'gender',
            'batch': 'batch',
            'year_of_joining': 'yearOfJoining',
            'section': 'section',
            'roll_number': 'rollNumber',
            'fee_structure_for_one_year': 'feeStructureForOneYear'
        }
        self._student_id = student_id
        self._application_number = application_number
        self._date_of_joining = date_of_joining
        self._branch = branch
        self._name = name
        self._parent_name = parent_name
        self._primary_number = primary_number
        self._secondary_number = secondary_number
        self._gender = gender
        self._batch = batch
        self._year_of_joining = year_of_joining
        self._section = section
        self._roll_number = roll_number
        self._fee_structure_for_one_year = fee_structure_for_one_year

    @classmethod
    def from_dict(cls, dikt) -> 'Student':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Student of this Student.  # noqa: E501
        :rtype: Student
        """
        return util.deserialize_model(dikt, cls)

    @property
    def student_id(self) -> str:
        """Gets the student_id of this Student.


        :return: The student_id of this Student.
        :rtype: str
        """
        return self._student_id

    @student_id.setter
    def student_id(self, student_id: str):
        """Sets the student_id of this Student.


        :param student_id: The student_id of this Student.
        :type student_id: str
        """

        self._student_id = student_id

    @property
    def application_number(self) -> str:
        """Gets the application_number of this Student.


        :return: The application_number of this Student.
        :rtype: str
        """
        return self._application_number

    @application_number.setter
    def application_number(self, application_number: str):
        """Sets the application_number of this Student.


        :param application_number: The application_number of this Student.
        :type application_number: str
        """

        self._application_number = application_number

    @property
    def date_of_joining(self) -> date:
        """Gets the date_of_joining of this Student.


        :return: The date_of_joining of this Student.
        :rtype: date
        """
        return self._date_of_joining

    @date_of_joining.setter
    def date_of_joining(self, date_of_joining: date):
        """Sets the date_of_joining of this Student.


        :param date_of_joining: The date_of_joining of this Student.
        :type date_of_joining: date
        """

        self._date_of_joining = date_of_joining

    @property
    def branch(self) -> str:
        """Gets the branch of this Student.


        :return: The branch of this Student.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch: str):
        """Sets the branch of this Student.


        :param branch: The branch of this Student.
        :type branch: str
        """

        self._branch = branch

    @property
    def name(self) -> str:
        """Gets the name of this Student.


        :return: The name of this Student.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Student.


        :param name: The name of this Student.
        :type name: str
        """

        self._name = name

    @property
    def parent_name(self) -> str:
        """Gets the parent_name of this Student.


        :return: The parent_name of this Student.
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name: str):
        """Sets the parent_name of this Student.


        :param parent_name: The parent_name of this Student.
        :type parent_name: str
        """

        self._parent_name = parent_name

    @property
    def primary_number(self) -> str:
        """Gets the primary_number of this Student.


        :return: The primary_number of this Student.
        :rtype: str
        """
        return self._primary_number

    @primary_number.setter
    def primary_number(self, primary_number: str):
        """Sets the primary_number of this Student.


        :param primary_number: The primary_number of this Student.
        :type primary_number: str
        """

        self._primary_number = primary_number

    @property
    def secondary_number(self) -> str:
        """Gets the secondary_number of this Student.


        :return: The secondary_number of this Student.
        :rtype: str
        """
        return self._secondary_number

    @secondary_number.setter
    def secondary_number(self, secondary_number: str):
        """Sets the secondary_number of this Student.


        :param secondary_number: The secondary_number of this Student.
        :type secondary_number: str
        """

        self._secondary_number = secondary_number

    @property
    def gender(self) -> str:
        """Gets the gender of this Student.


        :return: The gender of this Student.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Student.


        :param gender: The gender of this Student.
        :type gender: str
        """
        allowed_values = ["Male", "Female", "Other"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def batch(self) -> str:
        """Gets the batch of this Student.


        :return: The batch of this Student.
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch: str):
        """Sets the batch of this Student.


        :param batch: The batch of this Student.
        :type batch: str
        """

        self._batch = batch

    @property
    def year_of_joining(self) -> str:
        """Gets the year_of_joining of this Student.


        :return: The year_of_joining of this Student.
        :rtype: str
        """
        return self._year_of_joining

    @year_of_joining.setter
    def year_of_joining(self, year_of_joining: str):
        """Sets the year_of_joining of this Student.


        :param year_of_joining: The year_of_joining of this Student.
        :type year_of_joining: str
        """

        self._year_of_joining = year_of_joining

    @property
    def section(self) -> str:
        """Gets the section of this Student.


        :return: The section of this Student.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section: str):
        """Sets the section of this Student.


        :param section: The section of this Student.
        :type section: str
        """

        self._section = section

    @property
    def roll_number(self) -> str:
        """Gets the roll_number of this Student.


        :return: The roll_number of this Student.
        :rtype: str
        """
        return self._roll_number

    @roll_number.setter
    def roll_number(self, roll_number: str):
        """Sets the roll_number of this Student.


        :param roll_number: The roll_number of this Student.
        :type roll_number: str
        """

        self._roll_number = roll_number

    @property
    def fee_structure_for_one_year(self) -> float:
        """Gets the fee_structure_for_one_year of this Student.


        :return: The fee_structure_for_one_year of this Student.
        :rtype: float
        """
        return self._fee_structure_for_one_year

    @fee_structure_for_one_year.setter
    def fee_structure_for_one_year(self, fee_structure_for_one_year: float):
        """Sets the fee_structure_for_one_year of this Student.


        :param fee_structure_for_one_year: The fee_structure_for_one_year of this Student.
        :type fee_structure_for_one_year: float
        """

        self._fee_structure_for_one_year = fee_structure_for_one_year
